[config]
default_to_workspace = false

[env]
BUILD_FLAGS = "--profile ${RUSTC_PROFILE} -Zbuild-std=core,compiler_builtins,alloc -Zbuild-std-features=compiler-builtins-mem -Zunstable-options --timings=html"
UEFI_CRATES = "-p patina_mtrr"
BUILD_CRATES = "-p patina_mtrr"
COV_FLAGS = { value = "--workspace --lcov --profile test --ignore-filename-regex .*test.*", condition = { env_not_set = ["COV_FLAGS"] } }

[env.development]
RUSTC_PROFILE = "dev"
RUSTC_TARGET = "debug"

[env.release]
RUSTC_PROFILE = "release"
RUSTC_TARGET = "release"

[tasks.build]
description = """Builds a single rust package with the standard library.

Customizations:
    -p [development|release]: Builds in debug or release. Default: development

Example:
    `cargo make build`
    `cargo make -p release build`
"""
alias = "build-std"

[tasks.build-std]
description = """Builds patina_mtrr crate as std target.

Customizations:
    -p [development|release]: Builds in debug or release. Default: development

Example:
    `cargo make build-std`
"""
clear = true
command = "cargo"
args = ["build", "--profile", "${RUSTC_PROFILE}", "--features", "std", "--target", "${CARGO_MAKE_RUST_TARGET_TRIPLE}", "@@split(BUILD_CRATES, )", "@@split(UEFI_CRATES, )"]

[tasks.build-x64]
description = """Builds patina_mtrr crate as UEFI target.

Example:
    `cargo make build-x64`
    `cargo make -p release build-x64`
"""
clear = true
command = "cargo"
args = ["build", "--target", "x86_64-unknown-uefi", "@@split(BUILD_FLAGS, )", "@@split(UEFI_CRATES, )"]

[tasks.build-aarch64]
description = """Builds patina_mtrr crate as UEFI target.

Example:
    `cargo make build-aarch64`
    `cargo make -p release build-aarch64`
"""
clear = true
command = "cargo"
args = ["build", "--target", "aarch64-unknown-uefi", "@@split(BUILD_FLAGS, )", "@@split(UEFI_CRATES, )"]

[tasks.check_json]
description = "Checks rust code for errors with results in JSON. Example `cargo make check_json`"
clear = true
command = "cargo"
args = ["check", "--message-format=json"]

[tasks.check_no_std]
description = "Checks rust code for no_std build errors with results."
private = true
command = "cargo"
args = ["check", "--target", "x86_64-unknown-uefi", "@@split(NO_STD_FLAGS, )", "@@split(CARGO_MAKE_TASK_ARGS, )"]

[tasks.check_std]
description = "Checks rust code for std build errors with results."
private = true
command = "cargo"
args = ["check", "@@split(STD_FLAGS, )", "@@split(CARGO_MAKE_TASK_ARGS, )"]

[tasks.check_tests]
description = "Checks rust test code for build errors with results."
private = true
command = "cargo"
args = ["test", "--no-run", "@@split(CARGO_MAKE_TASK_ARGS, )"]

[tasks.check]
description = "Checks rust code for errors. Example `cargo make check`"
clear = true
run_task = [{ name = ["check_no_std", "check_std", "check_tests"], parallel = true }]

[tasks.test]
description = "Builds all rust tests in the workspace. Example `cargo make test`"
clear = true
command = "cargo"
args = ["test"]

[tasks.coverage]
description = "Build and run all tests and calculate coverage."
install_crate = false
clear = true
command = "cargo"
args = ["llvm-cov", "@@split(COV_FLAGS, )", "--output-path", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/lcov.info"]

[tasks.clippy]
description = "Run cargo clippy."
clear = true
command = "cargo"
args = ["clippy", "--all-targets", "--", "-D", "warnings"]

[tasks.doc]
env = { RUSTDOCFLAGS = "-D warnings"}
description = "Builds all rust documentation in the workspace. Example `cargo make doc`"
command = "cargo"
args = ["doc", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "--features", "doc"]

[tasks.doc-open]
env = { RUSTDOCFLAGS = "-D warnings"}
description = "Builds all rust documentation in the workspace and opens the documentation.  Example `cargo make doc`"
command = "cargo"
args = ["doc", "@@split(INDIVIDUAL_PACKAGE_TARGETS, )", "--features", "doc", "--open"]

[tasks.fmt]
description = "Run cargo format."
clear = true
command = "cargo"
args = ["fmt", "--all"]

[tasks.cspell]
description = "Run cspell for spell checking." # npm install -g cspell@latest
script = "cspell --quiet  --no-progress --no-summary  --dot --gitignore -e \"{.git/**,.github/**,.vscode/**}\" ."

[tasks.deny]
description = "Run cargo deny."
install_crate = false
clear = true
command = "cargo"
args = ["deny", "check"]

[tasks.all]
description = "Run all tasks for PR readiness."
dependencies = [
    "deny",
    "clippy",
    "cspell",
    "build",
    "build-x64",
    "build-aarch64",
    "test",
    "coverage",
    "fmt",
    "doc",
]
